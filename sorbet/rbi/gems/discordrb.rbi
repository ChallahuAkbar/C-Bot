# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/discordrb/all/discordrb.rbi
#
# discordrb-329045797fb2
module Discordrb
  def self.id_compare(one_id, other); end
  def self.split_message(msg); end
end
module Discordrb::Events
  def self.matches_all(attributes, to_check, &block); end
end
class Discordrb::Events::Negated
  def initialize(object); end
  def object; end
end
class Discordrb::Events::Event
  def bot; end
  def self.delegate(*methods, hash); end
end
class Discordrb::Events::EventHandler
  def after_call(event); end
  def call(event); end
  def initialize(attributes, block); end
  def match(event); end
  def matches?(_); end
  def matches_all(attributes, to_check, &block); end
end
class Discordrb::Events::TrueEventHandler < Discordrb::Events::EventHandler
  def matches?(_); end
end
class Object < BasicObject
  def not!(object); end
end
class Discordrb::Permissions
  def ==(other); end
  def add_reactions; end
  def administrate; end
  def administrator; end
  def attach_files; end
  def ban_members; end
  def bits; end
  def bits=(bits); end
  def can_add_reactions=(value); end
  def can_administrate=(value); end
  def can_administrator=(value); end
  def can_attach_files=(value); end
  def can_ban_members=(value); end
  def can_change_nickname=(value); end
  def can_connect=(value); end
  def can_create_instant_invite=(value); end
  def can_deafen_members=(value); end
  def can_embed_links=(value); end
  def can_kick_members=(value); end
  def can_manage_channels=(value); end
  def can_manage_emojis=(value); end
  def can_manage_messages=(value); end
  def can_manage_nicknames=(value); end
  def can_manage_roles=(value); end
  def can_manage_server=(value); end
  def can_manage_webhooks=(value); end
  def can_mention_everyone=(value); end
  def can_move_members=(value); end
  def can_mute_members=(value); end
  def can_priority_speaker=(value); end
  def can_read_message_history=(value); end
  def can_read_messages=(value); end
  def can_send_messages=(value); end
  def can_send_tts_messages=(value); end
  def can_speak=(value); end
  def can_use_external_emoji=(value); end
  def can_use_voice_activity=(value); end
  def can_view_audit_log=(value); end
  def change_nickname; end
  def connect; end
  def create_instant_invite; end
  def deafen_members; end
  def embed_links; end
  def init_vars; end
  def initialize(bits = nil, writer = nil); end
  def kick_members; end
  def manage_channels; end
  def manage_emojis; end
  def manage_messages; end
  def manage_nicknames; end
  def manage_roles; end
  def manage_server; end
  def manage_webhooks; end
  def mention_everyone; end
  def move_members; end
  def mute_members; end
  def priority_speaker; end
  def read_message_history; end
  def read_messages; end
  def self.bits(list); end
  def send_messages; end
  def send_tts_messages; end
  def speak; end
  def use_external_emoji; end
  def use_voice_activity; end
  def view_audit_log; end
end
module Discordrb::PermissionCalculator
  def can_add_reactions?(channel = nil); end
  def can_administrate?(channel = nil); end
  def can_administrator?(channel = nil); end
  def can_attach_files?(channel = nil); end
  def can_ban_members?(channel = nil); end
  def can_change_nickname?(channel = nil); end
  def can_connect?(channel = nil); end
  def can_create_instant_invite?(channel = nil); end
  def can_deafen_members?(channel = nil); end
  def can_embed_links?(channel = nil); end
  def can_kick_members?(channel = nil); end
  def can_manage_channels?(channel = nil); end
  def can_manage_emojis?(channel = nil); end
  def can_manage_messages?(channel = nil); end
  def can_manage_nicknames?(channel = nil); end
  def can_manage_roles?(channel = nil); end
  def can_manage_server?(channel = nil); end
  def can_manage_webhooks?(channel = nil); end
  def can_mention_everyone?(channel = nil); end
  def can_move_members?(channel = nil); end
  def can_mute_members?(channel = nil); end
  def can_priority_speaker?(channel = nil); end
  def can_read_message_history?(channel = nil); end
  def can_read_messages?(channel = nil); end
  def can_send_messages?(channel = nil); end
  def can_send_tts_messages?(channel = nil); end
  def can_speak?(channel = nil); end
  def can_use_external_emoji?(channel = nil); end
  def can_use_voice_activity?(channel = nil); end
  def can_view_audit_log?(channel = nil); end
  def defined_permission?(action, channel = nil); end
  def defined_role_permission?(action, channel); end
  def permission?(action, channel = nil); end
  def permission_overwrite(action, channel, id); end
end
module Discordrb::IDObject
  def ==(other); end
  def creation_time; end
  def eql?(other); end
  def hash; end
  def id; end
  def resolve_id; end
  def self.synthesise(time); end
  def self.synthesize(time); end
end
class Discordrb::ColourRGB
  def blue; end
  def combined; end
  def green; end
  def hex; end
  def hexadecimal; end
  def initialize(combined); end
  def red; end
  def to_i; end
end
module Discordrb::Errors
  def self.Code(code); end
  def self.error_class_for(code); end
end
class Discordrb::Errors::InvalidAuthenticationError < RuntimeError
  def message; end
end
class Discordrb::Errors::MessageTooLong < RuntimeError
end
class Discordrb::Errors::NoPermission < RuntimeError
end
class Discordrb::Errors::CloudflareError < RuntimeError
end
class Discordrb::Errors::CodeError < RuntimeError
  def code; end
  def initialize(message); end
  def message; end
  def self.code; end
end
class Discordrb::Errors::UnknownError < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownAccount < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownApplication < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownChannel < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownServer < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownIntegration < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownInvite < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownMember < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownMessage < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownOverwrite < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownProvider < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownRole < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownToken < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownUser < Discordrb::Errors::CodeError
end
class Discordrb::Errors::UnknownEmoji < Discordrb::Errors::CodeError
end
class Discordrb::Errors::EndpointNotForBots < Discordrb::Errors::CodeError
end
class Discordrb::Errors::EndpointOnlyForBots < Discordrb::Errors::CodeError
end
class Discordrb::Errors::ServerLimitReached < Discordrb::Errors::CodeError
end
class Discordrb::Errors::FriendLimitReached < Discordrb::Errors::CodeError
end
class Discordrb::Errors::PinLimitReached < Discordrb::Errors::CodeError
end
class Discordrb::Errors::RoleLimitReached < Discordrb::Errors::CodeError
end
class Discordrb::Errors::ReactionLimitReached < Discordrb::Errors::CodeError
end
class Discordrb::Errors::ChannelLimitReached < Discordrb::Errors::CodeError
end
class Discordrb::Errors::Unauthorised < Discordrb::Errors::CodeError
end
class Discordrb::Errors::MissingAccess < Discordrb::Errors::CodeError
end
class Discordrb::Errors::InvalidAccountType < Discordrb::Errors::CodeError
end
class Discordrb::Errors::InvalidActionForDM < Discordrb::Errors::CodeError
end
class Discordrb::Errors::EmbedDisabled < Discordrb::Errors::CodeError
end
class Discordrb::Errors::MessageAuthoredByOtherUser < Discordrb::Errors::CodeError
end
class Discordrb::Errors::MessageEmpty < Discordrb::Errors::CodeError
end
class Discordrb::Errors::NoMessagesToUser < Discordrb::Errors::CodeError
end
class Discordrb::Errors::NoMessagesInVoiceChannel < Discordrb::Errors::CodeError
end
class Discordrb::Errors::VerificationLevelTooHigh < Discordrb::Errors::CodeError
end
class Discordrb::Errors::NoBotForApplication < Discordrb::Errors::CodeError
end
class Discordrb::Errors::ApplicationLimitReached < Discordrb::Errors::CodeError
end
class Discordrb::Errors::InvalidOAuthState < Discordrb::Errors::CodeError
end
class Discordrb::Errors::MissingPermissions < Discordrb::Errors::CodeError
end
class Discordrb::Errors::InvalidAuthToken < Discordrb::Errors::CodeError
end
class Discordrb::Errors::NoteTooLong < Discordrb::Errors::CodeError
end
class Discordrb::Errors::InvalidBulkDeleteCount < Discordrb::Errors::CodeError
end
class Discordrb::Errors::CannotPinInDifferentChannel < Discordrb::Errors::CodeError
end
class Discordrb::Errors::InvalidActionForSystemMessage < Discordrb::Errors::CodeError
end
class Discordrb::Errors::MessageTooOld < Discordrb::Errors::CodeError
end
class Discordrb::Errors::InvalidFormBody < Discordrb::Errors::CodeError
end
class Discordrb::Errors::MissingBotMember < Discordrb::Errors::CodeError
end
class Discordrb::Errors::ReactionBlocked < Discordrb::Errors::CodeError
end
module Discordrb::API
  def acknowledge_message(token, channel_id, message_id); end
  def api_base; end
  def api_base=(value); end
  def app_icon_url(app_id, icon_id, format = nil); end
  def bot_name; end
  def bot_name=(value); end
  def cdn_url; end
  def create_oauth_application(token, name, redirect_uris); end
  def emoji_icon_url(emoji_id, format = nil); end
  def gateway(token); end
  def gateway_bot(token); end
  def handle_preemptive_rl(headers, mutex, key); end
  def icon_url(server_id, icon_id, format = nil); end
  def login(email, password); end
  def logout(token); end
  def mutex_wait(mutex); end
  def oauth_application(token); end
  def raw_request(type, attributes); end
  def request(key, major_parameter, type, *attributes); end
  def reset_mutexes; end
  def self.acknowledge_message(token, channel_id, message_id); end
  def self.api_base; end
  def self.api_base=(value); end
  def self.app_icon_url(app_id, icon_id, format = nil); end
  def self.bot_name; end
  def self.bot_name=(value); end
  def self.cdn_url; end
  def self.create_oauth_application(token, name, redirect_uris); end
  def self.emoji_icon_url(emoji_id, format = nil); end
  def self.gateway(token); end
  def self.gateway_bot(token); end
  def self.handle_preemptive_rl(headers, mutex, key); end
  def self.icon_url(server_id, icon_id, format = nil); end
  def self.login(email, password); end
  def self.logout(token); end
  def self.mutex_wait(mutex); end
  def self.oauth_application(token); end
  def self.raw_request(type, attributes); end
  def self.request(key, major_parameter, type, *attributes); end
  def self.reset_mutexes; end
  def self.splash_url(server_id, splash_id, format = nil); end
  def self.sync_wait(time, mutex); end
  def self.trace(reason); end
  def self.trace=(value); end
  def self.update_oauth_application(token, name, redirect_uris, description = nil, icon = nil); end
  def self.user_agent; end
  def self.validate_token(token); end
  def self.voice_regions(token); end
  def self.widget_url(server_id, style = nil); end
  def splash_url(server_id, splash_id, format = nil); end
  def sync_wait(time, mutex); end
  def trace(reason); end
  def trace=(value); end
  def update_oauth_application(token, name, redirect_uris, description = nil, icon = nil); end
  def user_agent; end
  def validate_token(token); end
  def voice_regions(token); end
  def widget_url(server_id, style = nil); end
end
module Discordrb::API::Channel
  def add_group_user(token, group_channel_id, user_id); end
  def bulk_delete_messages(token, channel_id, messages = nil); end
  def create_empty_group(token, bot_user_id); end
  def create_group(token, pm_channel_id, user_id); end
  def create_invite(token, channel_id, max_age = nil, max_uses = nil, temporary = nil, unique = nil, reason = nil); end
  def create_message(token, channel_id, message, tts = nil, embed = nil, nonce = nil); end
  def create_reaction(token, channel_id, message_id, emoji); end
  def create_webhook(token, channel_id, name, avatar = nil, reason = nil); end
  def delete(token, channel_id, reason = nil); end
  def delete_all_reactions(token, channel_id, message_id); end
  def delete_message(token, channel_id, message_id); end
  def delete_own_reaction(token, channel_id, message_id, emoji); end
  def delete_permission(token, channel_id, overwrite_id, reason = nil); end
  def delete_user_reaction(token, channel_id, message_id, emoji, user_id); end
  def edit_message(token, channel_id, message_id, message, mentions = nil, embed = nil); end
  def get_reactions(token, channel_id, message_id, emoji, before_id, after_id, limit = nil); end
  def invites(token, channel_id); end
  def leave_group(token, group_channel_id); end
  def message(token, channel_id, message_id); end
  def messages(token, channel_id, amount, before = nil, after = nil, around = nil); end
  def pin_message(token, channel_id, message_id); end
  def pinned_messages(token, channel_id); end
  def remove_group_user(token, group_channel_id, user_id); end
  def resolve(token, channel_id); end
  def self.add_group_user(token, group_channel_id, user_id); end
  def self.bulk_delete_messages(token, channel_id, messages = nil); end
  def self.create_empty_group(token, bot_user_id); end
  def self.create_group(token, pm_channel_id, user_id); end
  def self.create_invite(token, channel_id, max_age = nil, max_uses = nil, temporary = nil, unique = nil, reason = nil); end
  def self.create_message(token, channel_id, message, tts = nil, embed = nil, nonce = nil); end
  def self.create_reaction(token, channel_id, message_id, emoji); end
  def self.create_webhook(token, channel_id, name, avatar = nil, reason = nil); end
  def self.delete(token, channel_id, reason = nil); end
  def self.delete_all_reactions(token, channel_id, message_id); end
  def self.delete_message(token, channel_id, message_id); end
  def self.delete_own_reaction(token, channel_id, message_id, emoji); end
  def self.delete_permission(token, channel_id, overwrite_id, reason = nil); end
  def self.delete_user_reaction(token, channel_id, message_id, emoji, user_id); end
  def self.edit_message(token, channel_id, message_id, message, mentions = nil, embed = nil); end
  def self.get_reactions(token, channel_id, message_id, emoji, before_id, after_id, limit = nil); end
  def self.invites(token, channel_id); end
  def self.leave_group(token, group_channel_id); end
  def self.message(token, channel_id, message_id); end
  def self.messages(token, channel_id, amount, before = nil, after = nil, around = nil); end
  def self.pin_message(token, channel_id, message_id); end
  def self.pinned_messages(token, channel_id); end
  def self.remove_group_user(token, group_channel_id, user_id); end
  def self.resolve(token, channel_id); end
  def self.start_typing(token, channel_id); end
  def self.unpin_message(token, channel_id, message_id); end
  def self.update(token, channel_id, name, topic, position, bitrate, user_limit, nsfw, permission_overwrites = nil, parent_id = nil, rate_limit_per_user = nil, reason = nil); end
  def self.update_permission(token, channel_id, overwrite_id, allow, deny, type, reason = nil); end
  def self.upload_file(token, channel_id, file, caption: nil, tts: nil); end
  def self.webhooks(token, channel_id); end
  def start_typing(token, channel_id); end
  def unpin_message(token, channel_id, message_id); end
  def update(token, channel_id, name, topic, position, bitrate, user_limit, nsfw, permission_overwrites = nil, parent_id = nil, rate_limit_per_user = nil, reason = nil); end
  def update_permission(token, channel_id, overwrite_id, allow, deny, type, reason = nil); end
  def upload_file(token, channel_id, file, caption: nil, tts: nil); end
  def webhooks(token, channel_id); end
end
module Discordrb::API::Server
  def add_emoji(token, server_id, image, name, roles = nil, reason = nil); end
  def add_member(token, server_id, user_id, access_token, nick = nil, roles = nil, mute = nil, deaf = nil); end
  def add_member_role(token, server_id, user_id, role_id, reason = nil); end
  def audit_logs(token, server_id, limit, userid = nil, actiontype = nil, before = nil); end
  def ban_user(token, server_id, user_id, message_days, reason = nil); end
  def bans(token, server_id); end
  def begin_prune(token, server_id, days, reason = nil); end
  def channels(token, server_id); end
  def create(token, name, region = nil); end
  def create_channel(token, server_id, name, type, topic, bitrate, user_limit, permission_overwrites, parent_id, nsfw, rate_limit_per_user, position, reason = nil); end
  def create_integration(token, server_id, type, id); end
  def create_role(token, server_id, name, colour, hoist, mentionable, packed_permissions, reason = nil); end
  def delete(token, server_id); end
  def delete_emoji(token, server_id, emoji_id, reason = nil); end
  def delete_integration(token, server_id, integration_id); end
  def delete_role(token, server_id, role_id, reason = nil); end
  def edit_emoji(token, server_id, emoji_id, name, roles = nil, reason = nil); end
  def embed(token, server_id); end
  def integrations(token, server_id); end
  def invites(token, server_id); end
  def modify_embed(token, server_id, enabled, channel_id, reason = nil); end
  def prune_count(token, server_id, days); end
  def regions(token, server_id); end
  def remove_member(token, server_id, user_id, reason = nil); end
  def remove_member_role(token, server_id, user_id, role_id, reason = nil); end
  def resolve(token, server_id); end
  def resolve_member(token, server_id, user_id); end
  def resolve_members(token, server_id, limit, after = nil); end
  def roles(token, server_id); end
  def self.add_emoji(token, server_id, image, name, roles = nil, reason = nil); end
  def self.add_member(token, server_id, user_id, access_token, nick = nil, roles = nil, mute = nil, deaf = nil); end
  def self.add_member_role(token, server_id, user_id, role_id, reason = nil); end
  def self.audit_logs(token, server_id, limit, userid = nil, actiontype = nil, before = nil); end
  def self.ban_user(token, server_id, user_id, message_days, reason = nil); end
  def self.bans(token, server_id); end
  def self.begin_prune(token, server_id, days, reason = nil); end
  def self.channels(token, server_id); end
  def self.create(token, name, region = nil); end
  def self.create_channel(token, server_id, name, type, topic, bitrate, user_limit, permission_overwrites, parent_id, nsfw, rate_limit_per_user, position, reason = nil); end
  def self.create_integration(token, server_id, type, id); end
  def self.create_role(token, server_id, name, colour, hoist, mentionable, packed_permissions, reason = nil); end
  def self.delete(token, server_id); end
  def self.delete_emoji(token, server_id, emoji_id, reason = nil); end
  def self.delete_integration(token, server_id, integration_id); end
  def self.delete_role(token, server_id, role_id, reason = nil); end
  def self.edit_emoji(token, server_id, emoji_id, name, roles = nil, reason = nil); end
  def self.embed(token, server_id); end
  def self.integrations(token, server_id); end
  def self.invites(token, server_id); end
  def self.modify_embed(token, server_id, enabled, channel_id, reason = nil); end
  def self.prune_count(token, server_id, days); end
  def self.regions(token, server_id); end
  def self.remove_member(token, server_id, user_id, reason = nil); end
  def self.remove_member_role(token, server_id, user_id, role_id, reason = nil); end
  def self.resolve(token, server_id); end
  def self.resolve_member(token, server_id, user_id); end
  def self.resolve_members(token, server_id, limit, after = nil); end
  def self.roles(token, server_id); end
  def self.sync_integration(token, server_id, integration_id); end
  def self.transfer_ownership(token, server_id, user_id, reason = nil); end
  def self.unban_user(token, server_id, user_id, reason = nil); end
  def self.update(token, server_id, name, region, icon, afk_channel_id, afk_timeout, splash, default_message_notifications, verification_level, explicit_content_filter, system_channel_id, reason = nil); end
  def self.update_channel_positions(token, server_id, positions); end
  def self.update_integration(token, server_id, integration_id, expire_behavior, expire_grace_period, enable_emoticons); end
  def self.update_member(token, server_id, user_id, nick: nil, roles: nil, mute: nil, deaf: nil, channel_id: nil, reason: nil); end
  def self.update_role(token, server_id, role_id, name, colour, hoist = nil, mentionable = nil, packed_permissions = nil, reason = nil); end
  def self.update_role_positions(token, server_id, roles); end
  def self.webhooks(token, server_id); end
  def sync_integration(token, server_id, integration_id); end
  def transfer_ownership(token, server_id, user_id, reason = nil); end
  def unban_user(token, server_id, user_id, reason = nil); end
  def update(token, server_id, name, region, icon, afk_channel_id, afk_timeout, splash, default_message_notifications, verification_level, explicit_content_filter, system_channel_id, reason = nil); end
  def update_channel_positions(token, server_id, positions); end
  def update_integration(token, server_id, integration_id, expire_behavior, expire_grace_period, enable_emoticons); end
  def update_member(token, server_id, user_id, nick: nil, roles: nil, mute: nil, deaf: nil, channel_id: nil, reason: nil); end
  def update_role(token, server_id, role_id, name, colour, hoist = nil, mentionable = nil, packed_permissions = nil, reason = nil); end
  def update_role_positions(token, server_id, roles); end
  def webhooks(token, server_id); end
end
module Discordrb::API::Invite
  def accept(token, invite_code); end
  def delete(token, code, reason = nil); end
  def resolve(token, invite_code, counts = nil); end
  def self.accept(token, invite_code); end
  def self.delete(token, code, reason = nil); end
  def self.resolve(token, invite_code, counts = nil); end
end
module Discordrb::API::User
  def avatar_url(user_id, avatar_id, format = nil); end
  def change_own_nickname(token, server_id, nick, reason = nil); end
  def change_status_setting(token, status); end
  def connections(token); end
  def create_pm(token, recipient_id); end
  def default_avatar(discrim = nil); end
  def leave_server(token, server_id); end
  def profile(token); end
  def resolve(token, user_id); end
  def self.avatar_url(user_id, avatar_id, format = nil); end
  def self.change_own_nickname(token, server_id, nick, reason = nil); end
  def self.change_status_setting(token, status); end
  def self.connections(token); end
  def self.create_pm(token, recipient_id); end
  def self.default_avatar(discrim = nil); end
  def self.leave_server(token, server_id); end
  def self.profile(token); end
  def self.resolve(token, user_id); end
  def self.servers(token); end
  def self.update_profile(token, email, password, new_username, avatar, new_password = nil); end
  def self.user_dms(token); end
  def servers(token); end
  def update_profile(token, email, password, new_username, avatar, new_password = nil); end
  def user_dms(token); end
end
module Discordrb::API::Webhook
  def delete_webhook(token, webhook_id, reason = nil); end
  def self.delete_webhook(token, webhook_id, reason = nil); end
  def self.token_delete_webhook(webhook_token, webhook_id, reason = nil); end
  def self.token_update_webhook(webhook_token, webhook_id, data, reason = nil); end
  def self.token_webhook(webhook_token, webhook_id); end
  def self.update_webhook(token, webhook_id, data, reason = nil); end
  def self.webhook(token, webhook_id); end
  def token_delete_webhook(webhook_token, webhook_id, reason = nil); end
  def token_update_webhook(webhook_token, webhook_id, data, reason = nil); end
  def token_webhook(webhook_token, webhook_id); end
  def update_webhook(token, webhook_id, data, reason = nil); end
  def webhook(token, webhook_id); end
end
module Discordrb::Webhooks
end
class Discordrb::Webhooks::Embed
  def <<(field); end
  def add_field(name: nil, value: nil, inline: nil); end
  def author; end
  def author=(arg0); end
  def color; end
  def color=(value); end
  def colour; end
  def colour=(value); end
  def description; end
  def description=(arg0); end
  def fields; end
  def fields=(arg0); end
  def footer; end
  def footer=(arg0); end
  def image; end
  def image=(arg0); end
  def initialize(title: nil, description: nil, url: nil, timestamp: nil, colour: nil, color: nil, footer: nil, image: nil, thumbnail: nil, video: nil, provider: nil, author: nil, fields: nil); end
  def thumbnail; end
  def thumbnail=(arg0); end
  def timestamp; end
  def timestamp=(arg0); end
  def title; end
  def title=(arg0); end
  def to_hash; end
  def url; end
  def url=(arg0); end
end
class Discordrb::Webhooks::EmbedFooter
  def icon_url; end
  def icon_url=(arg0); end
  def initialize(text: nil, icon_url: nil); end
  def text; end
  def text=(arg0); end
  def to_hash; end
end
class Discordrb::Webhooks::EmbedImage
  def initialize(url: nil); end
  def to_hash; end
  def url; end
  def url=(arg0); end
end
class Discordrb::Webhooks::EmbedThumbnail
  def initialize(url: nil); end
  def to_hash; end
  def url; end
  def url=(arg0); end
end
class Discordrb::Webhooks::EmbedAuthor
  def icon_url; end
  def icon_url=(arg0); end
  def initialize(name: nil, url: nil, icon_url: nil); end
  def name; end
  def name=(arg0); end
  def to_hash; end
  def url; end
  def url=(arg0); end
end
class Discordrb::Webhooks::EmbedField
  def initialize(name: nil, value: nil, inline: nil); end
  def inline; end
  def inline=(arg0); end
  def name; end
  def name=(arg0); end
  def to_hash; end
  def value; end
  def value=(arg0); end
end
class Discordrb::Paginator
  def each; end
  def initialize(limit, direction, &block); end
  def limit_check; end
  include Enumerable
end
class Discordrb::Application
  def description; end
  def flags; end
  def icon_url; end
  def initialize(data, bot); end
  def inspect; end
  def name; end
  def owner; end
  def rpc_origins; end
  include Discordrb::IDObject
end
module Discordrb::UserAttributes
  def avatar_id; end
  def avatar_id=(arg0); end
  def avatar_url(format = nil); end
  def bot_account; end
  def bot_account?; end
  def discord_tag; end
  def discrim; end
  def discriminator; end
  def distinct; end
  def mention; end
  def name; end
  def tag; end
  def username; end
end
class Discordrb::User
  def await!(attributes = nil); end
  def await(key, attributes = nil, &block); end
  def current_bot?; end
  def dm(content = nil); end
  def game; end
  def idle?; end
  def initialize(data, bot); end
  def inspect; end
  def offline?; end
  def on(server); end
  def online?; end
  def pm(content = nil); end
  def send_file(file, caption = nil, filename: nil, spoiler: nil); end
  def status; end
  def stream_type; end
  def stream_url; end
  def update_presence(data); end
  def update_username(username); end
  def webhook?; end
  include Discordrb::IDObject
  include Discordrb::UserAttributes
end
class Discordrb::VoiceState
  def deaf; end
  def initialize(user_id); end
  def mute; end
  def self_deaf; end
  def self_mute; end
  def update(channel, mute, deaf, self_mute, self_deaf); end
  def user_id; end
  def voice_channel; end
end
class Discordrb::VoiceRegion
  def custom; end
  def deprecated; end
  def id; end
  def initialize(data); end
  def name; end
  def optimal; end
  def sample_hostname; end
  def sample_port; end
  def to_s; end
  def vip; end
end
module Discordrb::MemberAttributes
  def joined_at; end
  def nick; end
  def nickname; end
  def roles; end
  def server; end
end
class Discordrb::Member < Anonymous_Delegator_1
  def add_role(role, reason = nil); end
  def color; end
  def color_role; end
  def colour; end
  def colour_role; end
  def deaf; end
  def deafened?; end
  def display_name; end
  def highest_role; end
  def hoist_role; end
  def initialize(data, server, bot); end
  def inspect; end
  def modify_roles(add, remove, reason = nil); end
  def mute; end
  def muted?; end
  def nick=(nick); end
  def nickname=(nick); end
  def owner?; end
  def remove_role(role, reason = nil); end
  def role?(role); end
  def role_id_array(role); end
  def roles=(role); end
  def self_deaf; end
  def self_deafened?; end
  def self_mute; end
  def self_muted?; end
  def server_deafen; end
  def server_mute; end
  def server_undeafen; end
  def server_unmute; end
  def set_nick(nick, reason = nil); end
  def set_nickname(nick, reason = nil); end
  def set_roles(role, reason = nil); end
  def update_nick(nick); end
  def update_roles(role_ids); end
  def voice_channel; end
  def voice_state_attribute(name); end
  include Discordrb::MemberAttributes
  include Discordrb::PermissionCalculator
end
class Discordrb::Recipient < Anonymous_Delegator_2
  def channel; end
  def initialize(user, channel, bot); end
  def inspect; end
  include Discordrb::MemberAttributes
end
class Discordrb::Profile < Discordrb::User
  def avatar=(avatar); end
  def busy; end
  def current_bot?; end
  def dnd; end
  def idle; end
  def initialize(data, bot); end
  def inspect; end
  def invisible; end
  def name=(username); end
  def online; end
  def update_data(new_data); end
  def update_profile_data(new_data); end
  def update_profile_status_setting(status); end
  def username=(username); end
end
class Discordrb::Role
  def color; end
  def color=(colour); end
  def colour; end
  def colour=(colour); end
  def delete(reason = nil); end
  def hoist; end
  def hoist=(hoist); end
  def initialize(data, bot, server = nil); end
  def inspect; end
  def managed; end
  def managed?; end
  def members; end
  def mention; end
  def mentionable; end
  def mentionable=(mentionable); end
  def mentionable?; end
  def move_above(other = nil); end
  def name; end
  def name=(name); end
  def packed=(packed, update_perms = nil); end
  def permissions; end
  def position; end
  def server; end
  def sort_above(other = nil); end
  def update_data(new_data); end
  def update_from(other); end
  def update_role_data(new_data); end
  def users; end
  include Discordrb::IDObject
end
class Discordrb::Role::RoleWriter
  def initialize(role, token); end
  def inspect; end
  def write(bits); end
end
class Discordrb::InviteChannel
  def initialize(data, bot); end
  def name; end
  def type; end
  include Discordrb::IDObject
end
class Discordrb::InviteServer
  def initialize(data, bot); end
  def name; end
  def splash_hash; end
  include Discordrb::IDObject
end
class Discordrb::Invite
  def ==(other); end
  def channel; end
  def code; end
  def created_at; end
  def delete(reason = nil); end
  def initialize(data, bot); end
  def inspect; end
  def inviter; end
  def max_age; end
  def max_uses; end
  def member_count; end
  def online_member_count; end
  def online_user_count; end
  def revoke(reason = nil); end
  def revoked; end
  def revoked?; end
  def server; end
  def temporary; end
  def temporary?; end
  def url; end
  def user; end
  def user_count; end
  def uses; end
end
class Discordrb::Overwrite
  def ==(other); end
  def allow; end
  def allow=(arg0); end
  def deny; end
  def deny=(arg0); end
  def id; end
  def id=(arg0); end
  def initialize(object = nil, type: nil, allow: nil, deny: nil); end
  def self.from_hash(data); end
  def self.from_other(other); end
  def to_hash; end
  def type; end
  def type=(arg0); end
end
class Discordrb::Channel
  def add_group_user(user_ids); end
  def add_group_users(user_ids); end
  def add_recipient(recipient); end
  def await!(attributes = nil); end
  def await(key, attributes = nil, &block); end
  def bitrate; end
  def bitrate=(bitrate); end
  def bulk_delete(ids, strict = nil); end
  def category; end
  def category=(channel); end
  def category?; end
  def channels; end
  def children; end
  def create_group(user_ids); end
  def default?; end
  def default_channel?; end
  def define_overwrite(thing, allow = nil, deny = nil, reason: nil); end
  def delete(reason = nil); end
  def delete_message(message); end
  def delete_messages(messages, strict = nil); end
  def delete_overwrite(target, reason = nil); end
  def group?; end
  def history(amount, before_id = nil, after_id = nil, around_id = nil); end
  def history_ids(amount, before_id = nil, after_id = nil, around_id = nil); end
  def initialize(data, bot, server = nil); end
  def inspect; end
  def invite(max_age = nil, max_uses = nil, temporary = nil, unique = nil, reason = nil); end
  def invites; end
  def leave; end
  def leave_group; end
  def limit; end
  def limit=(limit); end
  def load_message(message_id); end
  def make_invite(max_age = nil, max_uses = nil, temporary = nil, unique = nil, reason = nil); end
  def member_overwrites; end
  def mention; end
  def message(message_id); end
  def name; end
  def name=(name); end
  def news?; end
  def nsfw; end
  def nsfw=(nsfw); end
  def nsfw?; end
  def overwrites(type = nil); end
  def owner_id; end
  def parent; end
  def parent=(channel); end
  def parent_id; end
  def permission_overwrites(type = nil); end
  def permission_overwrites=(overwrites); end
  def pins; end
  def pm?; end
  def position; end
  def position=(position); end
  def private?; end
  def process_permission_overwrites(overwrites); end
  def prune(amount, strict = nil, &block); end
  def rate_limit_per_user; end
  def rate_limit_per_user=(rate); end
  def recipient; end
  def recipients; end
  def remove_group_user(user_ids); end
  def remove_group_users(user_ids); end
  def remove_recipient(recipient); end
  def role_overwrites; end
  def send(content, tts = nil, embed = nil); end
  def send_embed(message = nil, embed = nil); end
  def send_file(file, caption: nil, tts: nil, filename: nil, spoiler: nil); end
  def send_message(content, tts = nil, embed = nil); end
  def send_multiple(content); end
  def send_temporary_message(content, timeout, tts = nil, embed = nil); end
  def server; end
  def slowmode?; end
  def slowmode_rate; end
  def slowmode_rate=(rate); end
  def sort_after(other = nil, lock_permissions = nil); end
  def split_send(content); end
  def start_typing; end
  def store?; end
  def sync; end
  def sync_overwrites; end
  def synced?; end
  def synchronized?; end
  def text?; end
  def text_channels; end
  def topic; end
  def topic=(topic); end
  def type; end
  def update_channel_data(new_data); end
  def update_data(new_data = nil); end
  def update_from(other); end
  def update_overwrites(overwrites); end
  def user_limit; end
  def user_limit=(limit); end
  def users; end
  def voice?; end
  def voice_channels; end
  def webhooks; end
  include Discordrb::IDObject
end
class Discordrb::Embed
  def author; end
  def color; end
  def colour; end
  def description; end
  def fields; end
  def footer; end
  def image; end
  def initialize(data, message); end
  def message; end
  def provider; end
  def thumbnail; end
  def timestamp; end
  def title; end
  def type; end
  def url; end
  def video; end
end
class Discordrb::EmbedFooter
  def embed; end
  def icon_url; end
  def initialize(data, embed); end
  def proxy_icon_url; end
  def text; end
end
class Discordrb::EmbedImage
  def embed; end
  def height; end
  def initialize(data, embed); end
  def proxy_url; end
  def url; end
  def width; end
end
class Discordrb::EmbedVideo
  def embed; end
  def height; end
  def initialize(data, embed); end
  def url; end
  def width; end
end
class Discordrb::EmbedThumbnail
  def embed; end
  def height; end
  def initialize(data, embed); end
  def proxy_url; end
  def url; end
  def width; end
end
class Discordrb::EmbedProvider
  def embed; end
  def initialize(data, embed); end
  def name; end
  def url; end
end
class Discordrb::EmbedAuthor
  def embed; end
  def icon_url; end
  def initialize(data, embed); end
  def name; end
  def proxy_icon_url; end
  def url; end
end
class Discordrb::EmbedField
  def embed; end
  def initialize(data, embed); end
  def inline; end
  def name; end
  def value; end
end
class Discordrb::Attachment
  def filename; end
  def height; end
  def image?; end
  def initialize(data, message, bot); end
  def message; end
  def proxy_url; end
  def size; end
  def spoiler?; end
  def url; end
  def width; end
  include Discordrb::IDObject
end
class Discordrb::Message
  def attachments; end
  def author; end
  def await!(attributes = nil); end
  def await(key, attributes = nil, &block); end
  def channel; end
  def content; end
  def create_reaction(reaction); end
  def delete; end
  def delete_all_reactions; end
  def delete_own_reaction(reaction); end
  def delete_reaction(user, reaction); end
  def edit(new_content, new_embed = nil); end
  def edit_timestamp; end
  def edited; end
  def edited?; end
  def edited_timestamp; end
  def embeds; end
  def emoji; end
  def emoji?; end
  def from_bot?; end
  def initialize(data, bot); end
  def inspect; end
  def mention_everyone; end
  def mention_everyone?; end
  def mentions; end
  def mentions_everyone?; end
  def my_reactions; end
  def nonce; end
  def pin; end
  def pinned; end
  def pinned?; end
  def react(reaction); end
  def reacted_with(reaction, limit: nil); end
  def reactions; end
  def reactions?; end
  def reply(content); end
  def role_mentions; end
  def scan_for_emoji; end
  def server; end
  def text; end
  def timestamp; end
  def to_s; end
  def tts; end
  def tts?; end
  def unpin; end
  def user; end
  def webhook?; end
  def webhook_id; end
  def writer; end
  include Discordrb::IDObject
end
class Discordrb::Reaction
  def count; end
  def id; end
  def initialize(data); end
  def me; end
  def me?; end
  def name; end
  def to_s; end
end
class Discordrb::Emoji
  def animated; end
  def animated?; end
  def icon_url; end
  def initialize(data, bot, server); end
  def inspect; end
  def mention; end
  def name; end
  def process_roles(roles); end
  def roles; end
  def server; end
  def to_reaction; end
  def to_s; end
  def use; end
  include Discordrb::IDObject
end
class Discordrb::IntegrationAccount
  def id; end
  def initialize(data); end
  def name; end
end
class Discordrb::Integration
  def account; end
  def emoticon; end
  def emoticon?; end
  def enabled; end
  def expire_behavior; end
  def expire_behaviour; end
  def expire_grace_period; end
  def initialize(data, bot, server); end
  def inspect; end
  def name; end
  def role; end
  def server; end
  def synced_at; end
  def syncing; end
  def type; end
  def user; end
  include Discordrb::IDObject
end
module Discordrb::ServerAttributes
  def icon_id; end
  def icon_url; end
  def name; end
end
class Discordrb::Server
  def add_channel(channel); end
  def add_emoji(name, image, roles = nil, reason: nil); end
  def add_member(member); end
  def add_member_using_token(user, access_token, nick: nil, roles: nil, deaf: nil, mute: nil); end
  def add_role(role); end
  def afk_channel; end
  def afk_channel=(afk_channel); end
  def afk_timeout; end
  def afk_timeout=(afk_timeout); end
  def any_emoji?; end
  def audit_logs(action: nil, user: nil, limit: nil, before: nil); end
  def available_voice_regions; end
  def ban(user, message_days = nil, reason: nil); end
  def bans; end
  def begin_prune(days, reason = nil); end
  def bot; end
  def bot_members; end
  def cache_embed_data; end
  def cache_member(member); end
  def categories; end
  def channels; end
  def content_filter_level; end
  def create_channel(name, type = nil, topic: nil, bitrate: nil, user_limit: nil, permission_overwrites: nil, parent: nil, nsfw: nil, rate_limit_per_user: nil, position: nil, reason: nil); end
  def create_role(name: nil, colour: nil, hoist: nil, mentionable: nil, permissions: nil, reason: nil); end
  def default_channel(send_messages = nil); end
  def default_message_notifications; end
  def default_message_notifications=(notification_level); end
  def delete; end
  def delete_channel(id); end
  def delete_emoji(emoji, reason: nil); end
  def delete_member(user_id); end
  def delete_role(role_id); end
  def edit_emoji(emoji, name: nil, roles: nil, reason: nil); end
  def embed?; end
  def embed_channel; end
  def embed_channel=(channel); end
  def embed_enabled=(value); end
  def embed_enabled?; end
  def emoji; end
  def emoji?; end
  def emojis; end
  def everyone_role; end
  def explicit_content_filter; end
  def explicit_content_filter=(filter_level); end
  def features; end
  def general_channel(send_messages = nil); end
  def has_emoji?; end
  def icon=(icon); end
  def initialize(data, bot, exists = nil); end
  def inspect; end
  def integrations; end
  def invites; end
  def kick(user, reason = nil); end
  def large; end
  def large?; end
  def leave; end
  def member(id, request = nil); end
  def member_cached?(user_id); end
  def member_count; end
  def members; end
  def modify_embed(enabled, channel, reason = nil); end
  def modify_widget(enabled, channel, reason = nil); end
  def move(user, channel); end
  def name=(name); end
  def non_bot_members; end
  def notification_level=(notification_level); end
  def online_members(include_idle: nil, include_bots: nil); end
  def online_users(include_idle: nil, include_bots: nil); end
  def orphan_channels; end
  def owner; end
  def owner=(user); end
  def process_channels(channels); end
  def process_chunk(members); end
  def process_emoji(emoji); end
  def process_members(members); end
  def process_presences(presences); end
  def process_roles(roles); end
  def process_voice_states(voice_states); end
  def prune(days, reason = nil); end
  def prune_count(days); end
  def region; end
  def region=(region); end
  def region_id; end
  def role(id); end
  def roles; end
  def set_embed_channel(channel, reason = nil); end
  def set_embed_enabled(value, reason = nil); end
  def set_widget_channel(channel, reason = nil); end
  def set_widget_enabled(value, reason = nil); end
  def splash=(splash_hash); end
  def splash_id; end
  def splash_url; end
  def system_channel; end
  def system_channel=(system_channel); end
  def text_channels; end
  def unban(user, reason = nil); end
  def update_data(new_data = nil); end
  def update_emoji_data(new_data); end
  def update_role_positions(role_positions); end
  def update_server_data(new_data); end
  def update_voice_state(data); end
  def users; end
  def verification_level; end
  def verification_level=(level); end
  def voice_channels; end
  def voice_states; end
  def webhooks; end
  def widget?; end
  def widget_banner_url(style); end
  def widget_channel; end
  def widget_channel=(channel); end
  def widget_enabled; end
  def widget_enabled=(value); end
  def widget_url; end
  include Discordrb::IDObject
  include Discordrb::ServerAttributes
end
class Discordrb::ServerBan
  def initialize(server, user, reason); end
  def lift(reason = nil); end
  def reason; end
  def remove(reason = nil); end
  def server; end
  def unban(reason = nil); end
  def user; end
end
class Discordrb::Webhook
  def avatar; end
  def avatar=(avatar); end
  def avatar_url; end
  def avatarise(avatar); end
  def channel; end
  def channel=(channel); end
  def delete(reason = nil); end
  def delete_avatar; end
  def initialize(data, bot); end
  def inspect; end
  def name; end
  def name=(name); end
  def owner; end
  def server; end
  def token; end
  def token?; end
  def update(data); end
  def update_internal(data); end
  def update_webhook(new_data); end
  include Discordrb::IDObject
end
class Discordrb::AuditLogs
  def entries; end
  def first; end
  def initialize(server, bot, data); end
  def latest; end
  def process_users(users); end
  def process_webhooks(webhooks); end
  def self.action_type_for(action); end
  def self.target_type_for(action); end
  def user(id); end
  def users; end
  def webhook(id); end
  def webhooks; end
end
class Discordrb::AuditLogs::Entry
  def action; end
  def action_type; end
  def amount; end
  def author; end
  def changes; end
  def channel; end
  def count; end
  def days; end
  def initialize(logs, server, bot, data); end
  def inspect; end
  def members_removed; end
  def process_changes(changes); end
  def process_target(id, type); end
  def reason; end
  def target; end
  def target_type; end
  def user; end
  include Discordrb::IDObject
end
class Discordrb::AuditLogs::Change
  def initialize(data, server, bot, logs); end
  def key; end
  def new; end
  def new_afk_channel; end
  def new_owner; end
  def new_value; end
  def new_widget_channel; end
  def old; end
  def old_afk_channel; end
  def old_owner; end
  def old_value; end
  def old_widget_channel; end
end
class Discordrb::AuditLogs::RoleChange
  def initialize(data, server); end
  def role; end
  def type; end
end
module Discordrb::Events::Respondable
  def <<(message); end
  def channel; end
  def drain; end
  def drain_into(result); end
  def respond(content, tts = nil, embed = nil); end
  def send(content, tts = nil, embed = nil); end
  def send_embed(message = nil, embed = nil, &block); end
  def send_message(content, tts = nil, embed = nil); end
  def send_temp(content, timeout); end
  def send_temporary_message(content, timeout); end
end
class Discordrb::Events::MessageEvent < Discordrb::Events::Event
  def attach_file(file, filename: nil, spoiler: nil); end
  def author; end
  def channel; end
  def content; end
  def detach_file; end
  def file; end
  def file_spoiler; end
  def filename; end
  def from_bot?; end
  def initialize(message, bot); end
  def message; end
  def saved_message; end
  def send_file(file, caption: nil, filename: nil, spoiler: nil); end
  def server; end
  def text; end
  def timestamp; end
  def user; end
  def voice; end
  include Discordrb::Events::Respondable
end
class Discordrb::Events::MessageEventHandler < Discordrb::Events::EventHandler
  def after_call(event); end
  def matches?(event); end
end
class Discordrb::Events::MentionEvent < Discordrb::Events::MessageEvent
end
class Discordrb::Events::MentionEventHandler < Discordrb::Events::MessageEventHandler
end
class Discordrb::Events::PrivateMessageEvent < Discordrb::Events::MessageEvent
end
class Discordrb::Events::PrivateMessageEventHandler < Discordrb::Events::MessageEventHandler
end
class Discordrb::Events::MessageIDEvent < Discordrb::Events::Event
  def id; end
  def initialize(data, bot); end
  include Discordrb::Events::Respondable
end
class Discordrb::Events::MessageIDEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::MessageEditEvent < Discordrb::Events::MessageEvent
end
class Discordrb::Events::MessageEditEventHandler < Discordrb::Events::MessageEventHandler
end
class Discordrb::Events::MessageDeleteEvent < Discordrb::Events::MessageIDEvent
end
class Discordrb::Events::MessageDeleteEventHandler < Discordrb::Events::MessageIDEventHandler
end
class Discordrb::Events::MessageUpdateEvent < Discordrb::Events::MessageEvent
end
class Discordrb::Events::MessageUpdateEventHandler < Discordrb::Events::MessageEventHandler
end
class Discordrb::Events::TypingEvent < Discordrb::Events::Event
  def channel; end
  def initialize(data, bot); end
  def member; end
  def timestamp; end
  def user; end
  include Discordrb::Events::Respondable
end
class Discordrb::Events::TypingEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::LifetimeEvent < Discordrb::Events::Event
  def initialize(bot); end
end
class Discordrb::Events::ReadyEvent < Discordrb::Events::LifetimeEvent
end
class Discordrb::Events::ReadyEventHandler < Discordrb::Events::TrueEventHandler
end
class Discordrb::Events::DisconnectEvent < Discordrb::Events::LifetimeEvent
end
class Discordrb::Events::DisconnectEventHandler < Discordrb::Events::TrueEventHandler
end
class Discordrb::Events::HeartbeatEvent < Discordrb::Events::LifetimeEvent
end
class Discordrb::Events::HeartbeatEventHandler < Discordrb::Events::TrueEventHandler
end
class Discordrb::Events::PresenceEvent < Discordrb::Events::Event
  def initialize(data, bot); end
  def server; end
  def status; end
  def user; end
end
class Discordrb::Events::PresenceEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::PlayingEvent < Discordrb::Events::Event
  def details; end
  def game; end
  def initialize(data, bot); end
  def server; end
  def type; end
  def url; end
  def user; end
end
class Discordrb::Events::PlayingEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::VoiceStateUpdateEvent < Discordrb::Events::Event
  def channel; end
  def deaf; end
  def initialize(data, old_channel_id, bot); end
  def mute; end
  def old_channel; end
  def self_deaf; end
  def self_mute; end
  def server; end
  def session_id; end
  def suppress; end
  def token; end
  def user; end
end
class Discordrb::Events::VoiceStateUpdateEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ChannelCreateEvent < Discordrb::Events::Event
  def channel; end
  def initialize(data, bot); end
  def name; end
  def owner_id; end
  def permission_overwrites; end
  def position; end
  def recipients; end
  def server; end
  def topic; end
  def type; end
  def user_limit; end
end
class Discordrb::Events::ChannelCreateEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ChannelDeleteEvent < Discordrb::Events::Event
  def id; end
  def initialize(data, bot); end
  def name; end
  def owner_id; end
  def position; end
  def server; end
  def topic; end
  def type; end
end
class Discordrb::Events::ChannelDeleteEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ChannelRecipientEvent < Discordrb::Events::Event
  def channel; end
  def id; end
  def initialize(data, bot); end
  def name; end
  def owner_id; end
  def permission_overwrites; end
  def position; end
  def recipient; end
  def recipients; end
  def server; end
  def topic; end
  def type; end
  def user_limit; end
end
class Discordrb::Events::ChannelRecipientEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ChannelRecipientAddEvent < Discordrb::Events::ChannelRecipientEvent
end
class Discordrb::Events::ChannelRecipientAddEventHandler < Discordrb::Events::ChannelRecipientEventHandler
end
class Discordrb::Events::ChannelRecipientRemoveEvent < Discordrb::Events::ChannelRecipientEvent
end
class Discordrb::Events::ChannelRecipientRemoveEventHandler < Discordrb::Events::ChannelRecipientEventHandler
end
class Discordrb::Events::ChannelUpdateEvent < Discordrb::Events::ChannelCreateEvent
end
class Discordrb::Events::ChannelUpdateEventHandler < Discordrb::Events::ChannelCreateEventHandler
end
class Discordrb::Events::ServerMemberEvent < Discordrb::Events::Event
  def init_roles(data, _); end
  def init_user(data, _); end
  def initialize(data, bot); end
  def member; end
  def roles; end
  def server; end
  def user; end
end
class Discordrb::Events::ServerMemberEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ServerMemberAddEvent < Discordrb::Events::ServerMemberEvent
end
class Discordrb::Events::ServerMemberAddEventHandler < Discordrb::Events::ServerMemberEventHandler
end
class Discordrb::Events::ServerMemberUpdateEvent < Discordrb::Events::ServerMemberEvent
end
class Discordrb::Events::ServerMemberUpdateEventHandler < Discordrb::Events::ServerMemberEventHandler
end
class Discordrb::Events::ServerMemberDeleteEvent < Discordrb::Events::ServerMemberEvent
  def init_user(data, bot); end
end
class Discordrb::Events::ServerMemberDeleteEventHandler < Discordrb::Events::ServerMemberEventHandler
end
class Discordrb::Events::ServerRoleCreateEvent < Discordrb::Events::Event
  def initialize(data, bot); end
  def name; end
  def role; end
  def server; end
end
class Discordrb::Events::ServerRoleCreateEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ServerRoleDeleteEvent < Discordrb::Events::Event
  def id; end
  def initialize(data, bot); end
  def server; end
end
class Discordrb::Events::ServerRoleDeleteEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ServerRoleUpdateEvent < Discordrb::Events::ServerRoleCreateEvent
end
class Discordrb::Events::ServerRoleUpdateEventHandler < Discordrb::Events::ServerRoleCreateEventHandler
end
class Discordrb::Events::ServerEvent < Discordrb::Events::Event
  def init_server(data, bot); end
  def initialize(data, bot); end
  def server; end
end
class Discordrb::Events::ServerEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ServerCreateEvent < Discordrb::Events::ServerEvent
end
class Discordrb::Events::ServerCreateEventHandler < Discordrb::Events::ServerEventHandler
end
class Discordrb::Events::ServerUpdateEvent < Discordrb::Events::ServerEvent
end
class Discordrb::Events::ServerUpdateEventHandler < Discordrb::Events::ServerEventHandler
end
class Discordrb::Events::ServerDeleteEvent < Discordrb::Events::ServerEvent
  def init_server(data, bot); end
end
class Discordrb::Events::ServerDeleteEventHandler < Discordrb::Events::ServerEventHandler
end
class Discordrb::Events::ServerEmojiChangeEvent < Discordrb::Events::ServerEvent
  def emoji; end
  def initialize(server, data, bot); end
  def process_emoji(data); end
  def server; end
end
class Discordrb::Events::ServerEmojiCDEvent < Discordrb::Events::ServerEvent
  def emoji; end
  def initialize(server, emoji, bot); end
  def server; end
end
class Discordrb::Events::ServerEmojiCreateEvent < Discordrb::Events::ServerEmojiCDEvent
end
class Discordrb::Events::ServerEmojiDeleteEvent < Discordrb::Events::ServerEmojiCDEvent
end
class Discordrb::Events::ServerEmojiUpdateEvent < Discordrb::Events::ServerEvent
  def emoji; end
  def initialize(server, old_emoji, emoji, bot); end
  def old_emoji; end
  def server; end
end
class Discordrb::Events::ServerEmojiChangeEventHandler < Discordrb::Events::ServerEventHandler
end
class Discordrb::Events::ServerEmojiCDEventHandler < Discordrb::Events::ServerEventHandler
  def matches?(event); end
end
class Discordrb::Events::ServerEmojiCreateEventHandler < Discordrb::Events::ServerEmojiCDEventHandler
end
class Discordrb::Events::ServerEmojiDeleteEventHandler < Discordrb::Events::ServerEmojiCDEventHandler
end
class Discordrb::Events::ServerEmojiUpdateEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Await
  def attributes; end
  def initialize(bot, key, type, attributes, block = nil); end
  def key; end
  def match(event); end
  def type; end
end
class Discordrb::Events::AwaitEvent < Discordrb::Events::Event
  def attributes; end
  def await; end
  def event; end
  def initialize(await, event, bot); end
  def key; end
  def type; end
end
class Discordrb::Events::AwaitEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::UserBanEvent < Discordrb::Events::Event
  def initialize(data, bot); end
  def server; end
  def user; end
end
class Discordrb::Events::UserBanEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::UserUnbanEvent < Discordrb::Events::UserBanEvent
end
class Discordrb::Events::UserUnbanEventHandler < Discordrb::Events::UserBanEventHandler
end
class Discordrb::Events::RawEvent < Discordrb::Events::Event
  def d; end
  def data; end
  def initialize(type, data, bot); end
  def t; end
  def type; end
end
class Discordrb::Events::RawEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::UnknownEvent < Discordrb::Events::RawEvent
end
class Discordrb::Events::UnknownEventHandler < Discordrb::Events::RawEventHandler
end
class Discordrb::Events::ReactionEvent < Discordrb::Events::Event
  def channel; end
  def emoji; end
  def initialize(data, bot); end
  def message; end
  def server; end
  def user; end
  include Discordrb::Events::Respondable
end
class Discordrb::Events::ReactionEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::ReactionAddEvent < Discordrb::Events::ReactionEvent
end
class Discordrb::Events::ReactionAddEventHandler < Discordrb::Events::ReactionEventHandler
end
class Discordrb::Events::ReactionRemoveEvent < Discordrb::Events::ReactionEvent
end
class Discordrb::Events::ReactionRemoveEventHandler < Discordrb::Events::ReactionEventHandler
end
class Discordrb::Events::ReactionRemoveAllEvent < Discordrb::Events::Event
  def channel; end
  def initialize(data, bot); end
  def message; end
  include Discordrb::Events::Respondable
end
class Discordrb::Events::ReactionRemoveAllEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
class Discordrb::Events::WebhookUpdateEvent < Discordrb::Events::Event
  def channel; end
  def initialize(data, bot); end
  def server; end
end
class Discordrb::Events::WebhookUpdateEventHandler < Discordrb::Events::EventHandler
  def matches?(event); end
end
module Discordrb::EventContainer
  def <<(handler); end
  def add_handler(handler); end
  def await(attributes = nil, &block); end
  def channel_create(attributes = nil, &block); end
  def channel_delete(attributes = nil, &block); end
  def channel_recipient_add(attributes = nil, &block); end
  def channel_recipient_remove(attributes = nil, &block); end
  def channel_update(attributes = nil, &block); end
  def clear!; end
  def direct_message(attributes = nil, &block); end
  def disconnected(attributes = nil, &block); end
  def dm(attributes = nil, &block); end
  def heartbeat(attributes = nil, &block); end
  def include!(container); end
  def include_events(container); end
  def member_join(attributes = nil, &block); end
  def member_leave(attributes = nil, &block); end
  def member_update(attributes = nil, &block); end
  def mention(attributes = nil, &block); end
  def message(attributes = nil, &block); end
  def message_delete(attributes = nil, &block); end
  def message_edit(attributes = nil, &block); end
  def message_update(attributes = nil, &block); end
  def playing(attributes = nil, &block); end
  def pm(attributes = nil, &block); end
  def presence(attributes = nil, &block); end
  def private_message(attributes = nil, &block); end
  def raw(attributes = nil, &block); end
  def reaction_add(attributes = nil, &block); end
  def reaction_remove(attributes = nil, &block); end
  def reaction_remove_all(attributes = nil, &block); end
  def ready(attributes = nil, &block); end
  def register_event(clazz, attributes, block); end
  def remove_handler(handler); end
  def self.class_from_string(str); end
  def self.event_class(handler_class); end
  def self.handler_class(event_class); end
  def server_create(attributes = nil, &block); end
  def server_delete(attributes = nil, &block); end
  def server_emoji(attributes = nil, &block); end
  def server_emoji_create(attributes = nil, &block); end
  def server_emoji_delete(attributes = nil, &block); end
  def server_emoji_update(attributes = nil, &block); end
  def server_role_create(attributes = nil, &block); end
  def server_role_delete(attributes = nil, &block); end
  def server_role_update(attributes = nil, &block); end
  def server_update(attributes = nil, &block); end
  def typing(attributes = nil, &block); end
  def unknown(attributes = nil, &block); end
  def user_ban(attributes = nil, &block); end
  def user_unban(attributes = nil, &block); end
  def voice_state_update(attributes = nil, &block); end
  def webhook_update(attributes = nil, &block); end
  include Discordrb::Events
end
module WebSocket::Client::Simple
end
class WebSocket::Client::Simple::Client
  def thread; end
end
class Discordrb::WebSocket
  def close; end
  def close_handler; end
  def error_handler; end
  def initialize(endpoint, open_handler, message_handler, close_handler, error_handler); end
  def message_handler; end
  def open_handler; end
  def send(data); end
  def thread; end
end
module Discordrb::Cache
  def channel(id, server = nil); end
  def ensure_channel(data, server = nil); end
  def ensure_server(data); end
  def ensure_user(data); end
  def find_channel(channel_name, server_name = nil, type: nil); end
  def find_user(username, discrim = nil); end
  def group_channel(id, server = nil); end
  def init_cache; end
  def invite(invite); end
  def member(server_or_id, user_id); end
  def pm_channel(id); end
  def private_channel(id); end
  def request_chunks(id); end
  def resolve_invite_code(invite); end
  def server(id); end
  def user(id); end
  def voice_regions; end
end
module Discordrb::Opcodes
end
class Discordrb::Session
  def initialize(session_id); end
  def invalid?; end
  def invalidate; end
  def resume; end
  def sequence; end
  def sequence=(arg0); end
  def session_id; end
  def should_resume?; end
  def suspend; end
  def suspended?; end
end
class Discordrb::Gateway
  def check_heartbeat_acks; end
  def check_heartbeat_acks=(arg0); end
  def close(no_sync = nil); end
  def connect; end
  def connect_loop; end
  def find_gateway; end
  def handle_close(e); end
  def handle_dispatch(packet); end
  def handle_error(e); end
  def handle_handshake_data(recv_data); end
  def handle_heartbeat(packet); end
  def handle_heartbeat_ack(packet); end
  def handle_hello(packet); end
  def handle_internal_close(e); end
  def handle_invalidate_session; end
  def handle_message(msg); end
  def handle_open; end
  def handle_reconnect; end
  def heartbeat; end
  def identify; end
  def initialize(bot, token, shard_key = nil, compress_mode = nil); end
  def inject_error(e); end
  def inject_reconnect(url = nil); end
  def inject_resume(seq); end
  def kill; end
  def notify_ready; end
  def obtain_socket(uri); end
  def open?; end
  def process_gateway; end
  def reconnect(attempt_resume = nil); end
  def resume; end
  def run_async; end
  def secure_uri?(uri); end
  def send(data, type = nil); end
  def send_heartbeat(sequence); end
  def send_identify(token, properties, compress, large_threshold, shard_key = nil); end
  def send_packet(opcode, packet); end
  def send_raw(data, type = nil); end
  def send_request_members(server_id, query, limit); end
  def send_resume(token, session_id, seq); end
  def send_status_update(status, since, game, afk); end
  def send_voice_state_update(server_id, channel_id, self_mute, self_deaf); end
  def setup_heartbeats(interval); end
  def socket_port(uri); end
  def stop(no_sync = nil); end
  def sync; end
  def wait_for_reconnect; end
  def websocket_loop; end
end
module Discordrb::Voice
end
class Discordrb::Voice::Encoder
  def adjust_volume(buf, mult); end
  def bitrate=(value); end
  def encode(buffer); end
  def encode_file(file, options = nil); end
  def encode_io(io, options = nil); end
  def ffmpeg_command; end
  def filter_volume; end
  def filter_volume=(arg0); end
  def filter_volume_argument; end
  def initialize; end
  def use_avconv; end
  def use_avconv=(arg0); end
end
class Discordrb::Voice::VoiceUDP
  def connect(endpoint, port, ssrc); end
  def encrypt_audio(header, buf); end
  def encrypted; end
  def encrypted=(arg0); end
  def encrypted?; end
  def initialize; end
  def receive_discovery_reply; end
  def secret_key=(arg0); end
  def send_audio(buf, sequence, time); end
  def send_discovery; end
  def send_packet(packet); end
end
class Discordrb::Voice::VoiceWS
  def connect; end
  def destroy; end
  def heartbeat_loop; end
  def init_ws; end
  def initialize(channel, bot, token, session, endpoint); end
  def mode; end
  def send_heartbeat; end
  def send_init(server_id, bot_user_id, session_id, token); end
  def send_speaking(value); end
  def send_udp_connection(ip, port, mode); end
  def udp; end
  def websocket_message(msg); end
  def websocket_open; end
end
class Discordrb::Logger
  def debug(message); end
  def debug=(value); end
  def error(message); end
  def fancy=(arg0); end
  def fancy_write(stream, message, mode, thread_name, timestamp); end
  def good(message); end
  def in(message); end
  def info(message); end
  def initialize(fancy = nil, streams = nil); end
  def log_exception(e); end
  def mode=(value); end
  def out(message); end
  def ratelimit(message); end
  def simple_write(stream, message, mode, thread_name, timestamp); end
  def streams; end
  def streams=(arg0); end
  def token=(arg0); end
  def warn(message); end
  def write(message, mode); end
end
class Discordrb::Voice::VoiceBot
  def adjust_average; end
  def adjust_average=(arg0); end
  def adjust_debug; end
  def adjust_debug=(arg0); end
  def adjust_interval; end
  def adjust_interval=(arg0); end
  def adjust_offset; end
  def adjust_offset=(arg0); end
  def channel; end
  def continue; end
  def destroy; end
  def encoder; end
  def encrypted?; end
  def filter_volume; end
  def filter_volume=(value); end
  def increment_packet_headers; end
  def initialize(channel, bot, token, session, endpoint, encrypted); end
  def isplaying?; end
  def length_override; end
  def length_override=(arg0); end
  def pause; end
  def play(encoded_io); end
  def play_dca(file); end
  def play_file(file, options = nil); end
  def play_internal; end
  def play_io(io, options = nil); end
  def play_stream(io, options = nil); end
  def playing?; end
  def skip(secs); end
  def speaking=(value); end
  def stop_playing(wait_for_confirmation = nil); end
  def stream_time; end
  def volume; end
  def volume=(arg0); end
end
class Discordrb::Bot
  def accept_invite(invite); end
  def add_await!(type, attributes = nil); end
  def add_await(key, type, attributes = nil, &block); end
  def add_guild_member(data); end
  def add_message_reaction(data); end
  def add_recipient(data); end
  def add_user_ban(data); end
  def all_emoji(id = nil); end
  def awaits; end
  def away; end
  def bot_app; end
  def bot_application; end
  def bot_user; end
  def call_event(handler, event); end
  def connected?; end
  def create_channel(data); end
  def create_guild(data); end
  def create_guild_role(data); end
  def create_message(data); end
  def create_oauth_application(name, redirect_uris); end
  def create_server(name, region = nil); end
  def debug(message); end
  def debug=(new_debug); end
  def delete_channel(data); end
  def delete_guild(data); end
  def delete_guild_member(data); end
  def delete_guild_role(data); end
  def delete_invite(code); end
  def delete_message(data); end
  def dispatch(type, data); end
  def dnd; end
  def emoji(id = nil); end
  def emojis(id = nil); end
  def event_threads; end
  def find_emoji(name); end
  def game=(name); end
  def gateway; end
  def gateway_check; end
  def handle_awaits(event); end
  def handle_dispatch(type, data); end
  def idle; end
  def ignore_user(user); end
  def ignored?(user); end
  def initialize(log_mode: nil, token: nil, client_id: nil, type: nil, name: nil, fancy_log: nil, suppress_ready: nil, parse_self: nil, shard_id: nil, num_shards: nil, redact_token: nil, ignore_bots: nil, compress_mode: nil); end
  def invisible; end
  def invite_url(server: nil, permission_bits: nil); end
  def join; end
  def listening=(name); end
  def log_exception(e); end
  def mode=(new_mode); end
  def name; end
  def name=(arg0); end
  def notify_ready; end
  def on; end
  def online; end
  def parse_mention(mention, server = nil); end
  def parse_mentions(mentions, server = nil); end
  def playing=(name); end
  def process_token(type, token); end
  def profile; end
  def prune_empty_groups; end
  def raise_event(event); end
  def raise_heartbeat_event; end
  def raw_token; end
  def remove_all_message_reactions(data); end
  def remove_message_reaction(data); end
  def remove_recipient(data); end
  def remove_user_ban(data); end
  def run(background = nil); end
  def send_file(channel, file, caption: nil, tts: nil, filename: nil, spoiler: nil); end
  def send_message(channel, content, tts = nil, embed = nil); end
  def send_temporary_message(channel, content, timeout, tts = nil, embed = nil); end
  def servers; end
  def shard_key; end
  def should_parse_self; end
  def should_parse_self=(arg0); end
  def start_typing(data); end
  def stop(no_sync = nil); end
  def stream(name, url); end
  def suppress_ready_debug; end
  def sync; end
  def token; end
  def unavailable_servers_check; end
  def unignore_user(user); end
  def update_channel(data); end
  def update_guild(data); end
  def update_guild_emoji(data); end
  def update_guild_member(data); end
  def update_guild_role(data); end
  def update_message(data); end
  def update_oauth_application(name, redirect_uris, description = nil, icon = nil); end
  def update_presence(data); end
  def update_status(status, activity, url, since = nil, afk = nil, activity_type = nil); end
  def update_voice_server(data); end
  def update_voice_state(data); end
  def users; end
  def voice(thing); end
  def voice_connect(chan, encrypted = nil); end
  def voice_destroy(server, destroy_vws = nil); end
  def voices; end
  def watching=(name); end
  include Discordrb::Cache
  include Discordrb::EventContainer
end
module Discordrb::Commands
end
class Discordrb::Commands::Command
  def attributes; end
  def call(event, arguments, chained = nil, check_permissions = nil); end
  def initialize(name, attributes = nil, &block); end
  def name; end
end
class Discordrb::Commands::CommandAlias
  def aliased_command; end
  def initialize(name, aliased_command); end
  def name; end
end
class Discordrb::Commands::CommandChain
  def divide_chain(chain); end
  def execute(event); end
  def execute_bare(event); end
  def initialize(chain, bot, subchain = nil); end
end
class Discordrb::Commands::CommandEvent < Discordrb::Events::MessageEvent
  def bot; end
  def command; end
  def command=(arg0); end
end
class Discordrb::Commands::Bucket
  def clean(rate_limit_time = nil); end
  def initialize(limit, time_span, delay); end
  def rate_limited?(thing, rate_limit_time = nil, increment: nil); end
  def resolve_key(thing); end
end
module Discordrb::Commands::RateLimiter
  def bucket(key, attributes); end
  def clean; end
  def include_buckets(limiter); end
  def rate_limited?(key, thing, increment: nil); end
end
class Discordrb::Commands::SimpleRateLimiter
  def initialize; end
  include Discordrb::Commands::RateLimiter
end
module Discordrb::Commands::CommandContainer
  def command(name, attributes = nil, &block); end
  def commands; end
  def include!(container); end
  def include_commands(container); end
  def remove_command(name); end
  include Discordrb::Commands::RateLimiter
end
class Discordrb::Commands::CommandBot < Discordrb::Bot
  def add_channel(channel); end
  def allowed_roles?(member, required); end
  def arg_check(args, types = nil, server = nil); end
  def attributes; end
  def channels=(channels); end
  def channels?(channel, channels); end
  def check_multiple_roles(member, required, all_roles = nil); end
  def command_aliases(name); end
  def create_message(data); end
  def execute_chain(chain, event); end
  def execute_command(name, event, arguments, chained = nil, check_permissions = nil); end
  def initialize(attributes = nil); end
  def permission?(user, level, server); end
  def prefix; end
  def remove_channel(channel); end
  def required_permissions?(member, required, channel = nil); end
  def required_roles?(member, required); end
  def set_role_permission(id, level); end
  def set_user_permission(id, level); end
  def simple_execute(chain, event); end
  def standard_prefix_trigger(message, prefix); end
  def stringify(object); end
  def trigger?(message); end
  def update_channels(channels = nil); end
  include Discordrb::Commands::CommandContainer
end
class Integer < Numeric
  def resolve_id; end
end
class String
  def resolve_id; end
end
