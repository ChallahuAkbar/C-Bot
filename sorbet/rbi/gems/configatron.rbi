# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/configatron/all/configatron.rbi
#
# configatron-4.5.1
class Configatron
end
class Configatron::UndefinedKeyError < StandardError
  def initialize(msg); end
end
class Configatron::LockedError < StandardError
end
module Configatron::Integrations
end
module Configatron::Integrations::Minitest
  def before_setup; end
  def before_teardown; end
end
module Configatron::Integrations::Rails
  def self.init(root = nil, env = nil); end
end
class Configatron::RootStore < BasicObject
  def __cow; end
  def __cow_path(path); end
  def initialize; end
  def inspect(*args, &block); end
  def lock!(&blk); end
  def locked?; end
  def method_missing(name, *args, &block); end
  def reset!; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def store; end
  def temp(&block); end
  def temp_end; end
  def temp_start; end
  def to_s(*args, &block); end
  def unlock!(&blk); end
  extend Forwardable
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Configatron::Store < BasicObject
  def [](key); end
  def []=(key, value); end
  def __cow; end
  def __cow_clone; end
  def clone; end
  def configure_from_hash(hash); end
  def delete(*args, &block); end
  def do_lookup(name, *args, &block); end
  def each(*args, &block); end
  def fetch(key, default_value = nil, &block); end
  def has_key?(key); end
  def initialize(root_store, name = nil, attributes = nil, path = nil); end
  def inspect; end
  def key?(key); end
  def keys(*args, &block); end
  def method_missing(name, *args, &block); end
  def nil?; end
  def store(key, value); end
  def to_ary; end
  def to_h; end
  def to_hash; end
  def to_s; end
  def values(*args, &block); end
  extend Forwardable
end
class Configatron::Proc
  def block; end
  def block=(arg0); end
  def call; end
  def execution_count; end
  def execution_count=(arg0); end
  def finalize?; end
  def initialize(&block); end
  def inspect; end
end
class Configatron::Delayed < Configatron::Proc
end
class Configatron::Dynamic < Configatron::Proc
  def finalize?; end
end
module Kernel
  def configatron; end
end
